import { GetServerSideProps, NextPage } from 'next'
import axios from 'axios'
import Head from 'next/head'
import PokemonCard from '@/components/PokemonCard'
import { GetPokemonData, Pokemon } from '@/types'
import styled from 'styled-components'

const Main = styled.main`
  text-align: center;
  margin: 2rem 0;
  padding: 1rem;
  max-width: 1100px;
  margin: auto;
`

const Title = styled.h1`
  text-align: center;
  color: #ffffff;
  margin-bottom: 2rem;
  font-size: 2rem;
  text-transform: uppercase;
`

const CardGrid = styled.section`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(12rem, 1fr));
  grid-gap: 1.5rem;
  justify-content: center;
  align-items: center;
`

const Home: NextPage<{ pokemonsData: Pokemon[] }> = ({ pokemonsData }) => {
  return (
    <>
      <Head>
        <title>Pokedex</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main>
        <Title>My pokemons</Title>
        <CardGrid>
          {pokemonsData.map(({ id, name, sprites, types }) => {
            return (
              <PokemonCard
                key={name}
                id={id}
                name={name}
                sprites={sprites}
                types={types}
              />
            )
          })}
        </CardGrid>
      </Main>
    </>
  )
}

const getPokemonURL = (id: number): string =>
  `https://pokeapi.co/api/v2/pokemon/${id}`

const generatePokemonPromises = () => {
  return Array<number>(150)
    .fill(150)
    .map((_, index) =>
      axios
        .get<GetPokemonData>(getPokemonURL(index + 1))
        .then(({ data }) => data)
        .catch(error => {
          if (axios.isAxiosError(error)) {
            console.log('error message: ', error.message)
            return error.message
          } else {
            console.log('unexpected error: ', error)
            return 'An unexpected error occurred'
          }
        }),
    )
}

export const getServerSideProps: GetServerSideProps = async context => {
  const pokemonPromises = generatePokemonPromises()

  const pokemonsData = await Promise.all(pokemonPromises).then(
    pokemons => pokemons,
  )

  return {
    props: { pokemonsData },
  }
}

export default Home
